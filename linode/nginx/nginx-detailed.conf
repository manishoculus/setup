user www-data;
worker_processes 4;
pid /var/run/nginx.pid;
 
events {

	# Determines how many clients will be served by each worker process.
	# (Max clients = worker_connections * worker_processes)
	# "Max clients" is also limited by the number of socket connections available on the system (~64k)
	worker_connections 4000;
Â 	# worker_connections 1024;

	# Accept as many connections as possible, after nginx gets notification about a new connection.
	# May flood worker_connections, if that option is set too low.
	multi_accept on;
}
 
 
http {
 
    # Sendfile copies data between one FD and other from within the kernel. 
    # More efficient than read() + write(), since the requires transferring data to and from the user space.
	sendfile on;

	# Tcp_nopush causes nginx to attempt to send its HTTP response head in one packet, 
	# instead of using partial frames. This is useful for prepending headers before calling sendfile, 
	# or for throughput optimization.
	tcp_nopush on;

    # don't buffer data-sends (disable Nagle algorithm). Good for sending frequent small bursts of data in real time.
	tcp_nodelay on;

	# Timeout for keep-alive connections. Server will close connections after this time.
	keepalive_timeout 30;

	# Number of requests a client can make over the keep-alive connection. This is set high for testing.
    keepalive_requests 100000;

    # allow the server to close the connection after a client stops responding. Frees up socket-associated memory.
    reset_timedout_connection on;

    # send the client a "request timed out" if the body is not loaded by this time. Default 60.
    client_body_timeout 10;

    # If the client stops reading data, free up the stale client connection after this much time. Default 60.
	send_timeout 2;



	types_hash_max_size 2048;

	# hide nginx version from the public for security reason
	# server_tokens off;
 
	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;
 
	include /etc/nginx/mime.types;
	default_type application/octet-stream;
 
	#access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	# Buffer log writes to speed up IO, or disable them altogether (ie. access_log off)
    access_log /var/log/nginx/access.log main buffer=16k;

	# Compression. Reduces the amount of data that needs to be transferred over the network
	gzip on;
	gzip_min_length 10240;
	gzip_proxied expired no-cache no-store private auth;
	gzip_types text/html text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
	gzip_disable "MSIE [1-6]\.";
	gzip_comp_level 6;
	gzip_buffers 16 8k;
	gzip_http_version 1.1;
 
 
	##
	# Virtual Host Configs
	##
	index index.php;
	## See here: http://wiki.nginx.org/WordPress
 
	server {
		## Your IP number goes here:
		## listen  204.62.14.112;
 
		## Below 3 lines will redirect non-www to www
		if ($host != 'DOMAIN' ) {
			rewrite  ^/(.*)$  http://www.DOMAIN/$1  permanent;
		}
 
		## Your website name goes here.
		server_name www.DOMAIN;
		## Your only path reference.
        	root /var/www/DOMAIN;
 
        	location = /favicon.ico {
			log_not_found off;
			access_log off;
		}
 
        	location = /robots.txt {
			allow all;
			log_not_found off;
			access_log off;
		}
 
        	location / {
			# This is cool because no php is touched for static content
			try_files $uri $uri/ /index.php;
		}
 
		location ~ \.php$ {
			fastcgi_pass   127.0.0.1:9000;
			fastcgi_index  index.php;
			fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
			include fastcgi_params;    
		}
 
		location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
			expires max;
			log_not_found off;
		}
 
	}
 
}
